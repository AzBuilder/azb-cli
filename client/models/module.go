// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Module module
//
// swagger:model module
type Module struct {

	// attributes
	Attributes *ModuleAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// relationships
	Relationships *ModuleRelationships `json:"relationships,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this module
func (m *Module) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Module) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Module) validateRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this module based on the context it is used
func (m *Module) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelationships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Module) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {
		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Module) contextValidateRelationships(ctx context.Context, formats strfmt.Registry) error {

	if m.Relationships != nil {
		if err := m.Relationships.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Module) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Module) UnmarshalBinary(b []byte) error {
	var res Module
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ModuleAttributes module attributes
//
// swagger:model ModuleAttributes
type ModuleAttributes struct {

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this module attributes
func (m *ModuleAttributes) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this module attributes based on context it is used
func (m *ModuleAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModuleAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModuleAttributes) UnmarshalBinary(b []byte) error {
	var res ModuleAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ModuleRelationships module relationships
//
// swagger:model ModuleRelationships
type ModuleRelationships struct {

	// definition
	Definition *ModuleRelationshipsDefinition `json:"definition,omitempty"`

	// organization
	Organization *ModuleRelationshipsOrganization `json:"organization,omitempty"`
}

// Validate validates this module relationships
func (m *ModuleRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModuleRelationships) validateDefinition(formats strfmt.Registry) error {
	if swag.IsZero(m.Definition) { // not required
		return nil
	}

	if m.Definition != nil {
		if err := m.Definition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "definition")
			}
			return err
		}
	}

	return nil
}

func (m *ModuleRelationships) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "organization")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this module relationships based on the context it is used
func (m *ModuleRelationships) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefinition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModuleRelationships) contextValidateDefinition(ctx context.Context, formats strfmt.Registry) error {

	if m.Definition != nil {
		if err := m.Definition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "definition")
			}
			return err
		}
	}

	return nil
}

func (m *ModuleRelationships) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.Organization != nil {
		if err := m.Organization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "organization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModuleRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModuleRelationships) UnmarshalBinary(b []byte) error {
	var res ModuleRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ModuleRelationshipsDefinition module relationships definition
//
// swagger:model ModuleRelationshipsDefinition
type ModuleRelationshipsDefinition struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [definition]
	Type string `json:"type,omitempty"`
}

// Validate validates this module relationships definition
func (m *ModuleRelationshipsDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var moduleRelationshipsDefinitionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["definition"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		moduleRelationshipsDefinitionTypeTypePropEnum = append(moduleRelationshipsDefinitionTypeTypePropEnum, v)
	}
}

const (

	// ModuleRelationshipsDefinitionTypeDefinition captures enum value "definition"
	ModuleRelationshipsDefinitionTypeDefinition string = "definition"
)

// prop value enum
func (m *ModuleRelationshipsDefinition) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, moduleRelationshipsDefinitionTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ModuleRelationshipsDefinition) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"definition"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this module relationships definition based on context it is used
func (m *ModuleRelationshipsDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModuleRelationshipsDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModuleRelationshipsDefinition) UnmarshalBinary(b []byte) error {
	var res ModuleRelationshipsDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ModuleRelationshipsOrganization module relationships organization
//
// swagger:model ModuleRelationshipsOrganization
type ModuleRelationshipsOrganization struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [organization]
	Type string `json:"type,omitempty"`
}

// Validate validates this module relationships organization
func (m *ModuleRelationshipsOrganization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var moduleRelationshipsOrganizationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["organization"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		moduleRelationshipsOrganizationTypeTypePropEnum = append(moduleRelationshipsOrganizationTypeTypePropEnum, v)
	}
}

const (

	// ModuleRelationshipsOrganizationTypeOrganization captures enum value "organization"
	ModuleRelationshipsOrganizationTypeOrganization string = "organization"
)

// prop value enum
func (m *ModuleRelationshipsOrganization) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, moduleRelationshipsOrganizationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ModuleRelationshipsOrganization) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"organization"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this module relationships organization based on context it is used
func (m *ModuleRelationshipsOrganization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModuleRelationshipsOrganization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModuleRelationshipsOrganization) UnmarshalBinary(b []byte) error {
	var res ModuleRelationshipsOrganization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
