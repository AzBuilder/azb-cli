// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Definition definition
//
// swagger:model definition
type Definition struct {

	// attributes
	Attributes *DefinitionAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// relationships
	Relationships *DefinitionRelationships `json:"relationships,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this definition
func (m *Definition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Definition) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Definition) validateRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this definition based on the context it is used
func (m *Definition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelationships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Definition) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {
		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Definition) contextValidateRelationships(ctx context.Context, formats strfmt.Registry) error {

	if m.Relationships != nil {
		if err := m.Relationships.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Definition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Definition) UnmarshalBinary(b []byte) error {
	var res Definition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DefinitionAttributes definition attributes
//
// swagger:model DefinitionAttributes
type DefinitionAttributes struct {

	// source
	Source string `json:"source,omitempty"`

	// source sample
	SourceSample string `json:"sourceSample,omitempty"`

	// status
	// Enum: [PRE_ALPHA ALPHA BETA RELEASE_CANDIDATE RELEASE_TO_MANUFACTURING GENERAL_AVAILABILITY]
	Status string `json:"status,omitempty"`

	// terraform version
	TerraformVersion string `json:"terraformVersion,omitempty"`

	// type
	// Enum: [HTTP GIT]
	Type string `json:"type,omitempty"`
}

// Validate validates this definition attributes
func (m *DefinitionAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var definitionAttributesTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRE_ALPHA","ALPHA","BETA","RELEASE_CANDIDATE","RELEASE_TO_MANUFACTURING","GENERAL_AVAILABILITY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		definitionAttributesTypeStatusPropEnum = append(definitionAttributesTypeStatusPropEnum, v)
	}
}

const (

	// DefinitionAttributesStatusPREALPHA captures enum value "PRE_ALPHA"
	DefinitionAttributesStatusPREALPHA string = "PRE_ALPHA"

	// DefinitionAttributesStatusALPHA captures enum value "ALPHA"
	DefinitionAttributesStatusALPHA string = "ALPHA"

	// DefinitionAttributesStatusBETA captures enum value "BETA"
	DefinitionAttributesStatusBETA string = "BETA"

	// DefinitionAttributesStatusRELEASECANDIDATE captures enum value "RELEASE_CANDIDATE"
	DefinitionAttributesStatusRELEASECANDIDATE string = "RELEASE_CANDIDATE"

	// DefinitionAttributesStatusRELEASETOMANUFACTURING captures enum value "RELEASE_TO_MANUFACTURING"
	DefinitionAttributesStatusRELEASETOMANUFACTURING string = "RELEASE_TO_MANUFACTURING"

	// DefinitionAttributesStatusGENERALAVAILABILITY captures enum value "GENERAL_AVAILABILITY"
	DefinitionAttributesStatusGENERALAVAILABILITY string = "GENERAL_AVAILABILITY"
)

// prop value enum
func (m *DefinitionAttributes) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, definitionAttributesTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DefinitionAttributes) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("attributes"+"."+"status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var definitionAttributesTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HTTP","GIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		definitionAttributesTypeTypePropEnum = append(definitionAttributesTypeTypePropEnum, v)
	}
}

const (

	// DefinitionAttributesTypeHTTP captures enum value "HTTP"
	DefinitionAttributesTypeHTTP string = "HTTP"

	// DefinitionAttributesTypeGIT captures enum value "GIT"
	DefinitionAttributesTypeGIT string = "GIT"
)

// prop value enum
func (m *DefinitionAttributes) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, definitionAttributesTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DefinitionAttributes) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("attributes"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this definition attributes based on context it is used
func (m *DefinitionAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DefinitionAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefinitionAttributes) UnmarshalBinary(b []byte) error {
	var res DefinitionAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DefinitionRelationships definition relationships
//
// swagger:model DefinitionRelationships
type DefinitionRelationships struct {

	// module
	Module *DefinitionRelationshipsModule `json:"module,omitempty"`

	// parameter
	Parameter *DefinitionRelationshipsParameter `json:"parameter,omitempty"`
}

// Validate validates this definition relationships
func (m *DefinitionRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefinitionRelationships) validateModule(formats strfmt.Registry) error {
	if swag.IsZero(m.Module) { // not required
		return nil
	}

	if m.Module != nil {
		if err := m.Module.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "module")
			}
			return err
		}
	}

	return nil
}

func (m *DefinitionRelationships) validateParameter(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameter) { // not required
		return nil
	}

	if m.Parameter != nil {
		if err := m.Parameter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "parameter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this definition relationships based on the context it is used
func (m *DefinitionRelationships) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateModule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefinitionRelationships) contextValidateModule(ctx context.Context, formats strfmt.Registry) error {

	if m.Module != nil {
		if err := m.Module.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "module")
			}
			return err
		}
	}

	return nil
}

func (m *DefinitionRelationships) contextValidateParameter(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameter != nil {
		if err := m.Parameter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "parameter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DefinitionRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefinitionRelationships) UnmarshalBinary(b []byte) error {
	var res DefinitionRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DefinitionRelationshipsModule definition relationships module
//
// swagger:model DefinitionRelationshipsModule
type DefinitionRelationshipsModule struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [module]
	Type string `json:"type,omitempty"`
}

// Validate validates this definition relationships module
func (m *DefinitionRelationshipsModule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var definitionRelationshipsModuleTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["module"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		definitionRelationshipsModuleTypeTypePropEnum = append(definitionRelationshipsModuleTypeTypePropEnum, v)
	}
}

const (

	// DefinitionRelationshipsModuleTypeModule captures enum value "module"
	DefinitionRelationshipsModuleTypeModule string = "module"
)

// prop value enum
func (m *DefinitionRelationshipsModule) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, definitionRelationshipsModuleTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DefinitionRelationshipsModule) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"module"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this definition relationships module based on context it is used
func (m *DefinitionRelationshipsModule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DefinitionRelationshipsModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefinitionRelationshipsModule) UnmarshalBinary(b []byte) error {
	var res DefinitionRelationshipsModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DefinitionRelationshipsParameter definition relationships parameter
//
// swagger:model DefinitionRelationshipsParameter
type DefinitionRelationshipsParameter struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [parameter]
	Type string `json:"type,omitempty"`
}

// Validate validates this definition relationships parameter
func (m *DefinitionRelationshipsParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var definitionRelationshipsParameterTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["parameter"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		definitionRelationshipsParameterTypeTypePropEnum = append(definitionRelationshipsParameterTypeTypePropEnum, v)
	}
}

const (

	// DefinitionRelationshipsParameterTypeParameter captures enum value "parameter"
	DefinitionRelationshipsParameterTypeParameter string = "parameter"
)

// prop value enum
func (m *DefinitionRelationshipsParameter) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, definitionRelationshipsParameterTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DefinitionRelationshipsParameter) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"parameter"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this definition relationships parameter based on context it is used
func (m *DefinitionRelationshipsParameter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DefinitionRelationshipsParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefinitionRelationshipsParameter) UnmarshalBinary(b []byte) error {
	var res DefinitionRelationshipsParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
