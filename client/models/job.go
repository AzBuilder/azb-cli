// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Job job
//
// swagger:model job
type Job struct {

	// attributes
	Attributes *JobAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// relationships
	Relationships *JobRelationships `json:"relationships,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this job
func (m *Job) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Job) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Job) validateRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this job based on the context it is used
func (m *Job) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelationships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Job) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {
		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Job) contextValidateRelationships(ctx context.Context, formats strfmt.Registry) error {

	if m.Relationships != nil {
		if err := m.Relationships.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Job) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Job) UnmarshalBinary(b []byte) error {
	var res Job
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// JobAttributes job attributes
//
// swagger:model JobAttributes
type JobAttributes struct {

	// command
	// Enum: [plan apply destroy]
	Command string `json:"command,omitempty"`

	// output
	Output string `json:"output,omitempty"`

	// status
	// Enum: [pending queue running completed]
	Status string `json:"status,omitempty"`
}

// Validate validates this job attributes
func (m *JobAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var jobAttributesTypeCommandPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["plan","apply","destroy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobAttributesTypeCommandPropEnum = append(jobAttributesTypeCommandPropEnum, v)
	}
}

const (

	// JobAttributesCommandPlan captures enum value "plan"
	JobAttributesCommandPlan string = "plan"

	// JobAttributesCommandApply captures enum value "apply"
	JobAttributesCommandApply string = "apply"

	// JobAttributesCommandDestroy captures enum value "destroy"
	JobAttributesCommandDestroy string = "destroy"
)

// prop value enum
func (m *JobAttributes) validateCommandEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobAttributesTypeCommandPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobAttributes) validateCommand(formats strfmt.Registry) error {
	if swag.IsZero(m.Command) { // not required
		return nil
	}

	// value enum
	if err := m.validateCommandEnum("attributes"+"."+"command", "body", m.Command); err != nil {
		return err
	}

	return nil
}

var jobAttributesTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","queue","running","completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobAttributesTypeStatusPropEnum = append(jobAttributesTypeStatusPropEnum, v)
	}
}

const (

	// JobAttributesStatusPending captures enum value "pending"
	JobAttributesStatusPending string = "pending"

	// JobAttributesStatusQueue captures enum value "queue"
	JobAttributesStatusQueue string = "queue"

	// JobAttributesStatusRunning captures enum value "running"
	JobAttributesStatusRunning string = "running"

	// JobAttributesStatusCompleted captures enum value "completed"
	JobAttributesStatusCompleted string = "completed"
)

// prop value enum
func (m *JobAttributes) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobAttributesTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobAttributes) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("attributes"+"."+"status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this job attributes based on context it is used
func (m *JobAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JobAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobAttributes) UnmarshalBinary(b []byte) error {
	var res JobAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// JobRelationships job relationships
//
// swagger:model JobRelationships
type JobRelationships struct {

	// organization
	Organization *JobRelationshipsOrganization `json:"organization,omitempty"`

	// workspace
	Workspace *JobRelationshipsWorkspace `json:"workspace,omitempty"`
}

// Validate validates this job relationships
func (m *JobRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobRelationships) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "organization")
			}
			return err
		}
	}

	return nil
}

func (m *JobRelationships) validateWorkspace(formats strfmt.Registry) error {
	if swag.IsZero(m.Workspace) { // not required
		return nil
	}

	if m.Workspace != nil {
		if err := m.Workspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "workspace")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this job relationships based on the context it is used
func (m *JobRelationships) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkspace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobRelationships) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.Organization != nil {
		if err := m.Organization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "organization")
			}
			return err
		}
	}

	return nil
}

func (m *JobRelationships) contextValidateWorkspace(ctx context.Context, formats strfmt.Registry) error {

	if m.Workspace != nil {
		if err := m.Workspace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "workspace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobRelationships) UnmarshalBinary(b []byte) error {
	var res JobRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// JobRelationshipsOrganization job relationships organization
//
// swagger:model JobRelationshipsOrganization
type JobRelationshipsOrganization struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [organization]
	Type string `json:"type,omitempty"`
}

// Validate validates this job relationships organization
func (m *JobRelationshipsOrganization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var jobRelationshipsOrganizationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["organization"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobRelationshipsOrganizationTypeTypePropEnum = append(jobRelationshipsOrganizationTypeTypePropEnum, v)
	}
}

const (

	// JobRelationshipsOrganizationTypeOrganization captures enum value "organization"
	JobRelationshipsOrganizationTypeOrganization string = "organization"
)

// prop value enum
func (m *JobRelationshipsOrganization) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobRelationshipsOrganizationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobRelationshipsOrganization) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"organization"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this job relationships organization based on context it is used
func (m *JobRelationshipsOrganization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JobRelationshipsOrganization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobRelationshipsOrganization) UnmarshalBinary(b []byte) error {
	var res JobRelationshipsOrganization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// JobRelationshipsWorkspace job relationships workspace
//
// swagger:model JobRelationshipsWorkspace
type JobRelationshipsWorkspace struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [workspace]
	Type string `json:"type,omitempty"`
}

// Validate validates this job relationships workspace
func (m *JobRelationshipsWorkspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var jobRelationshipsWorkspaceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["workspace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobRelationshipsWorkspaceTypeTypePropEnum = append(jobRelationshipsWorkspaceTypeTypePropEnum, v)
	}
}

const (

	// JobRelationshipsWorkspaceTypeWorkspace captures enum value "workspace"
	JobRelationshipsWorkspaceTypeWorkspace string = "workspace"
)

// prop value enum
func (m *JobRelationshipsWorkspace) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobRelationshipsWorkspaceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobRelationshipsWorkspace) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"workspace"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this job relationships workspace based on context it is used
func (m *JobRelationshipsWorkspace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JobRelationshipsWorkspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobRelationshipsWorkspace) UnmarshalBinary(b []byte) error {
	var res JobRelationshipsWorkspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
