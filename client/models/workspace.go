// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Workspace workspace
//
// swagger:model workspace
type Workspace struct {

	// attributes
	Attributes *WorkspaceAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// relationships
	Relationships *WorkspaceRelationships `json:"relationships,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this workspace
func (m *Workspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Workspace) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Workspace) validateRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this workspace based on the context it is used
func (m *Workspace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelationships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Workspace) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {
		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Workspace) contextValidateRelationships(ctx context.Context, formats strfmt.Registry) error {

	if m.Relationships != nil {
		if err := m.Relationships.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Workspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Workspace) UnmarshalBinary(b []byte) error {
	var res Workspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceAttributes workspace attributes
//
// swagger:model WorkspaceAttributes
type WorkspaceAttributes struct {

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this workspace attributes
func (m *WorkspaceAttributes) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this workspace attributes based on context it is used
func (m *WorkspaceAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceAttributes) UnmarshalBinary(b []byte) error {
	var res WorkspaceAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceRelationships workspace relationships
//
// swagger:model WorkspaceRelationships
type WorkspaceRelationships struct {

	// definition
	Definition *WorkspaceRelationshipsDefinition `json:"definition,omitempty"`

	// environment
	Environment *WorkspaceRelationshipsEnvironment `json:"environment,omitempty"`

	// job
	Job *WorkspaceRelationshipsJob `json:"job,omitempty"`

	// organization
	Organization *WorkspaceRelationshipsOrganization `json:"organization,omitempty"`

	// secret
	Secret *WorkspaceRelationshipsSecret `json:"secret,omitempty"`

	// variable
	Variable *WorkspaceRelationshipsVariable `json:"variable,omitempty"`
}

// Validate validates this workspace relationships
func (m *WorkspaceRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceRelationships) validateDefinition(formats strfmt.Registry) error {
	if swag.IsZero(m.Definition) { // not required
		return nil
	}

	if m.Definition != nil {
		if err := m.Definition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "definition")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceRelationships) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	if m.Environment != nil {
		if err := m.Environment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "environment")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceRelationships) validateJob(formats strfmt.Registry) error {
	if swag.IsZero(m.Job) { // not required
		return nil
	}

	if m.Job != nil {
		if err := m.Job.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "job")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceRelationships) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "organization")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceRelationships) validateSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.Secret) { // not required
		return nil
	}

	if m.Secret != nil {
		if err := m.Secret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "secret")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceRelationships) validateVariable(formats strfmt.Registry) error {
	if swag.IsZero(m.Variable) { // not required
		return nil
	}

	if m.Variable != nil {
		if err := m.Variable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "variable")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this workspace relationships based on the context it is used
func (m *WorkspaceRelationships) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefinition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvironment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVariable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceRelationships) contextValidateDefinition(ctx context.Context, formats strfmt.Registry) error {

	if m.Definition != nil {
		if err := m.Definition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "definition")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceRelationships) contextValidateEnvironment(ctx context.Context, formats strfmt.Registry) error {

	if m.Environment != nil {
		if err := m.Environment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "environment")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceRelationships) contextValidateJob(ctx context.Context, formats strfmt.Registry) error {

	if m.Job != nil {
		if err := m.Job.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "job")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceRelationships) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.Organization != nil {
		if err := m.Organization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "organization")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceRelationships) contextValidateSecret(ctx context.Context, formats strfmt.Registry) error {

	if m.Secret != nil {
		if err := m.Secret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "secret")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceRelationships) contextValidateVariable(ctx context.Context, formats strfmt.Registry) error {

	if m.Variable != nil {
		if err := m.Variable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "variable")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceRelationships) UnmarshalBinary(b []byte) error {
	var res WorkspaceRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceRelationshipsDefinition workspace relationships definition
//
// swagger:model WorkspaceRelationshipsDefinition
type WorkspaceRelationshipsDefinition struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [definition]
	Type string `json:"type,omitempty"`
}

// Validate validates this workspace relationships definition
func (m *WorkspaceRelationshipsDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workspaceRelationshipsDefinitionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["definition"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workspaceRelationshipsDefinitionTypeTypePropEnum = append(workspaceRelationshipsDefinitionTypeTypePropEnum, v)
	}
}

const (

	// WorkspaceRelationshipsDefinitionTypeDefinition captures enum value "definition"
	WorkspaceRelationshipsDefinitionTypeDefinition string = "definition"
)

// prop value enum
func (m *WorkspaceRelationshipsDefinition) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workspaceRelationshipsDefinitionTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkspaceRelationshipsDefinition) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"definition"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workspace relationships definition based on context it is used
func (m *WorkspaceRelationshipsDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceRelationshipsDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceRelationshipsDefinition) UnmarshalBinary(b []byte) error {
	var res WorkspaceRelationshipsDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceRelationshipsEnvironment workspace relationships environment
//
// swagger:model WorkspaceRelationshipsEnvironment
type WorkspaceRelationshipsEnvironment struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [environment]
	Type string `json:"type,omitempty"`
}

// Validate validates this workspace relationships environment
func (m *WorkspaceRelationshipsEnvironment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workspaceRelationshipsEnvironmentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["environment"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workspaceRelationshipsEnvironmentTypeTypePropEnum = append(workspaceRelationshipsEnvironmentTypeTypePropEnum, v)
	}
}

const (

	// WorkspaceRelationshipsEnvironmentTypeEnvironment captures enum value "environment"
	WorkspaceRelationshipsEnvironmentTypeEnvironment string = "environment"
)

// prop value enum
func (m *WorkspaceRelationshipsEnvironment) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workspaceRelationshipsEnvironmentTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkspaceRelationshipsEnvironment) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"environment"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workspace relationships environment based on context it is used
func (m *WorkspaceRelationshipsEnvironment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceRelationshipsEnvironment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceRelationshipsEnvironment) UnmarshalBinary(b []byte) error {
	var res WorkspaceRelationshipsEnvironment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceRelationshipsJob workspace relationships job
//
// swagger:model WorkspaceRelationshipsJob
type WorkspaceRelationshipsJob struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [job]
	Type string `json:"type,omitempty"`
}

// Validate validates this workspace relationships job
func (m *WorkspaceRelationshipsJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workspaceRelationshipsJobTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["job"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workspaceRelationshipsJobTypeTypePropEnum = append(workspaceRelationshipsJobTypeTypePropEnum, v)
	}
}

const (

	// WorkspaceRelationshipsJobTypeJob captures enum value "job"
	WorkspaceRelationshipsJobTypeJob string = "job"
)

// prop value enum
func (m *WorkspaceRelationshipsJob) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workspaceRelationshipsJobTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkspaceRelationshipsJob) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"job"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workspace relationships job based on context it is used
func (m *WorkspaceRelationshipsJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceRelationshipsJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceRelationshipsJob) UnmarshalBinary(b []byte) error {
	var res WorkspaceRelationshipsJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceRelationshipsOrganization workspace relationships organization
//
// swagger:model WorkspaceRelationshipsOrganization
type WorkspaceRelationshipsOrganization struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [organization]
	Type string `json:"type,omitempty"`
}

// Validate validates this workspace relationships organization
func (m *WorkspaceRelationshipsOrganization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workspaceRelationshipsOrganizationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["organization"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workspaceRelationshipsOrganizationTypeTypePropEnum = append(workspaceRelationshipsOrganizationTypeTypePropEnum, v)
	}
}

const (

	// WorkspaceRelationshipsOrganizationTypeOrganization captures enum value "organization"
	WorkspaceRelationshipsOrganizationTypeOrganization string = "organization"
)

// prop value enum
func (m *WorkspaceRelationshipsOrganization) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workspaceRelationshipsOrganizationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkspaceRelationshipsOrganization) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"organization"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workspace relationships organization based on context it is used
func (m *WorkspaceRelationshipsOrganization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceRelationshipsOrganization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceRelationshipsOrganization) UnmarshalBinary(b []byte) error {
	var res WorkspaceRelationshipsOrganization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceRelationshipsSecret workspace relationships secret
//
// swagger:model WorkspaceRelationshipsSecret
type WorkspaceRelationshipsSecret struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [secret]
	Type string `json:"type,omitempty"`
}

// Validate validates this workspace relationships secret
func (m *WorkspaceRelationshipsSecret) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workspaceRelationshipsSecretTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["secret"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workspaceRelationshipsSecretTypeTypePropEnum = append(workspaceRelationshipsSecretTypeTypePropEnum, v)
	}
}

const (

	// WorkspaceRelationshipsSecretTypeSecret captures enum value "secret"
	WorkspaceRelationshipsSecretTypeSecret string = "secret"
)

// prop value enum
func (m *WorkspaceRelationshipsSecret) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workspaceRelationshipsSecretTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkspaceRelationshipsSecret) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"secret"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workspace relationships secret based on context it is used
func (m *WorkspaceRelationshipsSecret) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceRelationshipsSecret) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceRelationshipsSecret) UnmarshalBinary(b []byte) error {
	var res WorkspaceRelationshipsSecret
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceRelationshipsVariable workspace relationships variable
//
// swagger:model WorkspaceRelationshipsVariable
type WorkspaceRelationshipsVariable struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [variable]
	Type string `json:"type,omitempty"`
}

// Validate validates this workspace relationships variable
func (m *WorkspaceRelationshipsVariable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workspaceRelationshipsVariableTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["variable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workspaceRelationshipsVariableTypeTypePropEnum = append(workspaceRelationshipsVariableTypeTypePropEnum, v)
	}
}

const (

	// WorkspaceRelationshipsVariableTypeVariable captures enum value "variable"
	WorkspaceRelationshipsVariableTypeVariable string = "variable"
)

// prop value enum
func (m *WorkspaceRelationshipsVariable) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workspaceRelationshipsVariableTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkspaceRelationshipsVariable) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"variable"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workspace relationships variable based on context it is used
func (m *WorkspaceRelationshipsVariable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceRelationshipsVariable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceRelationshipsVariable) UnmarshalBinary(b []byte) error {
	var res WorkspaceRelationshipsVariable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
