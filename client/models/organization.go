// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Organization organization
//
// swagger:model organization
type Organization struct {

	// attributes
	Attributes *OrganizationAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// relationships
	Relationships *OrganizationRelationships `json:"relationships,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this organization
func (m *Organization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Organization) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Organization) validateRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this organization based on the context it is used
func (m *Organization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelationships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Organization) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {
		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Organization) contextValidateRelationships(ctx context.Context, formats strfmt.Registry) error {

	if m.Relationships != nil {
		if err := m.Relationships.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Organization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Organization) UnmarshalBinary(b []byte) error {
	var res Organization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OrganizationAttributes organization attributes
//
// swagger:model OrganizationAttributes
type OrganizationAttributes struct {

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this organization attributes
func (m *OrganizationAttributes) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this organization attributes based on context it is used
func (m *OrganizationAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationAttributes) UnmarshalBinary(b []byte) error {
	var res OrganizationAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OrganizationRelationships organization relationships
//
// swagger:model OrganizationRelationships
type OrganizationRelationships struct {

	// job
	Job *OrganizationRelationshipsJob `json:"job,omitempty"`

	// module
	Module *OrganizationRelationshipsModule `json:"module,omitempty"`

	// workspace
	Workspace *OrganizationRelationshipsWorkspace `json:"workspace,omitempty"`
}

// Validate validates this organization relationships
func (m *OrganizationRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationRelationships) validateJob(formats strfmt.Registry) error {
	if swag.IsZero(m.Job) { // not required
		return nil
	}

	if m.Job != nil {
		if err := m.Job.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "job")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationRelationships) validateModule(formats strfmt.Registry) error {
	if swag.IsZero(m.Module) { // not required
		return nil
	}

	if m.Module != nil {
		if err := m.Module.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "module")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationRelationships) validateWorkspace(formats strfmt.Registry) error {
	if swag.IsZero(m.Workspace) { // not required
		return nil
	}

	if m.Workspace != nil {
		if err := m.Workspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "workspace")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this organization relationships based on the context it is used
func (m *OrganizationRelationships) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkspace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationRelationships) contextValidateJob(ctx context.Context, formats strfmt.Registry) error {

	if m.Job != nil {
		if err := m.Job.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "job")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationRelationships) contextValidateModule(ctx context.Context, formats strfmt.Registry) error {

	if m.Module != nil {
		if err := m.Module.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "module")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationRelationships) contextValidateWorkspace(ctx context.Context, formats strfmt.Registry) error {

	if m.Workspace != nil {
		if err := m.Workspace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "workspace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationRelationships) UnmarshalBinary(b []byte) error {
	var res OrganizationRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OrganizationRelationshipsJob organization relationships job
//
// swagger:model OrganizationRelationshipsJob
type OrganizationRelationshipsJob struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [job]
	Type string `json:"type,omitempty"`
}

// Validate validates this organization relationships job
func (m *OrganizationRelationshipsJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var organizationRelationshipsJobTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["job"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		organizationRelationshipsJobTypeTypePropEnum = append(organizationRelationshipsJobTypeTypePropEnum, v)
	}
}

const (

	// OrganizationRelationshipsJobTypeJob captures enum value "job"
	OrganizationRelationshipsJobTypeJob string = "job"
)

// prop value enum
func (m *OrganizationRelationshipsJob) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, organizationRelationshipsJobTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrganizationRelationshipsJob) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"job"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this organization relationships job based on context it is used
func (m *OrganizationRelationshipsJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationRelationshipsJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationRelationshipsJob) UnmarshalBinary(b []byte) error {
	var res OrganizationRelationshipsJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OrganizationRelationshipsModule organization relationships module
//
// swagger:model OrganizationRelationshipsModule
type OrganizationRelationshipsModule struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [module]
	Type string `json:"type,omitempty"`
}

// Validate validates this organization relationships module
func (m *OrganizationRelationshipsModule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var organizationRelationshipsModuleTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["module"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		organizationRelationshipsModuleTypeTypePropEnum = append(organizationRelationshipsModuleTypeTypePropEnum, v)
	}
}

const (

	// OrganizationRelationshipsModuleTypeModule captures enum value "module"
	OrganizationRelationshipsModuleTypeModule string = "module"
)

// prop value enum
func (m *OrganizationRelationshipsModule) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, organizationRelationshipsModuleTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrganizationRelationshipsModule) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"module"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this organization relationships module based on context it is used
func (m *OrganizationRelationshipsModule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationRelationshipsModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationRelationshipsModule) UnmarshalBinary(b []byte) error {
	var res OrganizationRelationshipsModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OrganizationRelationshipsWorkspace organization relationships workspace
//
// swagger:model OrganizationRelationshipsWorkspace
type OrganizationRelationshipsWorkspace struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [workspace]
	Type string `json:"type,omitempty"`
}

// Validate validates this organization relationships workspace
func (m *OrganizationRelationshipsWorkspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var organizationRelationshipsWorkspaceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["workspace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		organizationRelationshipsWorkspaceTypeTypePropEnum = append(organizationRelationshipsWorkspaceTypeTypePropEnum, v)
	}
}

const (

	// OrganizationRelationshipsWorkspaceTypeWorkspace captures enum value "workspace"
	OrganizationRelationshipsWorkspaceTypeWorkspace string = "workspace"
)

// prop value enum
func (m *OrganizationRelationshipsWorkspace) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, organizationRelationshipsWorkspaceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrganizationRelationshipsWorkspace) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"workspace"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this organization relationships workspace based on context it is used
func (m *OrganizationRelationshipsWorkspace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationRelationshipsWorkspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationRelationshipsWorkspace) UnmarshalBinary(b []byte) error {
	var res OrganizationRelationshipsWorkspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
