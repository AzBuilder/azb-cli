// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Parameter parameter
//
// swagger:model parameter
type Parameter struct {

	// attributes
	Attributes *ParameterAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// relationships
	Relationships *ParameterRelationships `json:"relationships,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this parameter
func (m *Parameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Parameter) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Parameter) validateRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this parameter based on the context it is used
func (m *Parameter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelationships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Parameter) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {
		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Parameter) contextValidateRelationships(ctx context.Context, formats strfmt.Registry) error {

	if m.Relationships != nil {
		if err := m.Relationships.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Parameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Parameter) UnmarshalBinary(b []byte) error {
	var res Parameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParameterAttributes parameter attributes
//
// swagger:model ParameterAttributes
type ParameterAttributes struct {

	// key
	Key string `json:"key,omitempty"`

	// parameter type
	// Enum: [SECRET VARIABLE ENVIRONMENT]
	ParameterType string `json:"parameterType,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this parameter attributes
func (m *ParameterAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameterType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var parameterAttributesTypeParameterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SECRET","VARIABLE","ENVIRONMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		parameterAttributesTypeParameterTypePropEnum = append(parameterAttributesTypeParameterTypePropEnum, v)
	}
}

const (

	// ParameterAttributesParameterTypeSECRET captures enum value "SECRET"
	ParameterAttributesParameterTypeSECRET string = "SECRET"

	// ParameterAttributesParameterTypeVARIABLE captures enum value "VARIABLE"
	ParameterAttributesParameterTypeVARIABLE string = "VARIABLE"

	// ParameterAttributesParameterTypeENVIRONMENT captures enum value "ENVIRONMENT"
	ParameterAttributesParameterTypeENVIRONMENT string = "ENVIRONMENT"
)

// prop value enum
func (m *ParameterAttributes) validateParameterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, parameterAttributesTypeParameterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ParameterAttributes) validateParameterType(formats strfmt.Registry) error {
	if swag.IsZero(m.ParameterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateParameterTypeEnum("attributes"+"."+"parameterType", "body", m.ParameterType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this parameter attributes based on context it is used
func (m *ParameterAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ParameterAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParameterAttributes) UnmarshalBinary(b []byte) error {
	var res ParameterAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParameterRelationships parameter relationships
//
// swagger:model ParameterRelationships
type ParameterRelationships struct {

	// definition
	Definition *ParameterRelationshipsDefinition `json:"definition,omitempty"`
}

// Validate validates this parameter relationships
func (m *ParameterRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefinition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterRelationships) validateDefinition(formats strfmt.Registry) error {
	if swag.IsZero(m.Definition) { // not required
		return nil
	}

	if m.Definition != nil {
		if err := m.Definition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "definition")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this parameter relationships based on the context it is used
func (m *ParameterRelationships) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefinition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterRelationships) contextValidateDefinition(ctx context.Context, formats strfmt.Registry) error {

	if m.Definition != nil {
		if err := m.Definition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "definition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParameterRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParameterRelationships) UnmarshalBinary(b []byte) error {
	var res ParameterRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParameterRelationshipsDefinition parameter relationships definition
//
// swagger:model ParameterRelationshipsDefinition
type ParameterRelationshipsDefinition struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [definition]
	Type string `json:"type,omitempty"`
}

// Validate validates this parameter relationships definition
func (m *ParameterRelationshipsDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var parameterRelationshipsDefinitionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["definition"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		parameterRelationshipsDefinitionTypeTypePropEnum = append(parameterRelationshipsDefinitionTypeTypePropEnum, v)
	}
}

const (

	// ParameterRelationshipsDefinitionTypeDefinition captures enum value "definition"
	ParameterRelationshipsDefinitionTypeDefinition string = "definition"
)

// prop value enum
func (m *ParameterRelationshipsDefinition) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, parameterRelationshipsDefinitionTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ParameterRelationshipsDefinition) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("relationships"+"."+"definition"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this parameter relationships definition based on context it is used
func (m *ParameterRelationshipsDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ParameterRelationshipsDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParameterRelationshipsDefinition) UnmarshalBinary(b []byte) error {
	var res ParameterRelationshipsDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
