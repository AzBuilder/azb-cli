// Code generated by go-swagger; DO NOT EDIT.

package workspace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workspace API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workspace API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteOrganizationOrganizationIDRelationshipsWorkspace(params *DeleteOrganizationOrganizationIDRelationshipsWorkspaceParams, opts ...ClientOption) (*DeleteOrganizationOrganizationIDRelationshipsWorkspaceNoContent, error)

	DeleteOrganizationOrganizationIDWorkspaceWorkspaceID(params *DeleteOrganizationOrganizationIDWorkspaceWorkspaceIDParams, opts ...ClientOption) (*DeleteOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent, error)

	GetOrganizationOrganizationIDRelationshipsWorkspace(params *GetOrganizationOrganizationIDRelationshipsWorkspaceParams, opts ...ClientOption) (*GetOrganizationOrganizationIDRelationshipsWorkspaceOK, error)

	GetOrganizationOrganizationIDWorkspace(params *GetOrganizationOrganizationIDWorkspaceParams, opts ...ClientOption) (*GetOrganizationOrganizationIDWorkspaceOK, error)

	GetOrganizationOrganizationIDWorkspaceWorkspaceID(params *GetOrganizationOrganizationIDWorkspaceWorkspaceIDParams, opts ...ClientOption) (*GetOrganizationOrganizationIDWorkspaceWorkspaceIDOK, error)

	PatchOrganizationOrganizationIDRelationshipsWorkspace(params *PatchOrganizationOrganizationIDRelationshipsWorkspaceParams, opts ...ClientOption) (*PatchOrganizationOrganizationIDRelationshipsWorkspaceNoContent, error)

	PatchOrganizationOrganizationIDWorkspaceWorkspaceID(params *PatchOrganizationOrganizationIDWorkspaceWorkspaceIDParams, opts ...ClientOption) (*PatchOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent, error)

	PostOrganizationOrganizationIDRelationshipsWorkspace(params *PostOrganizationOrganizationIDRelationshipsWorkspaceParams, opts ...ClientOption) (*PostOrganizationOrganizationIDRelationshipsWorkspaceCreated, error)

	PostOrganizationOrganizationIDWorkspace(params *PostOrganizationOrganizationIDWorkspaceParams, opts ...ClientOption) (*PostOrganizationOrganizationIDWorkspaceCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteOrganizationOrganizationIDRelationshipsWorkspace Deletes items from the relationship workspace
*/
func (a *Client) DeleteOrganizationOrganizationIDRelationshipsWorkspace(params *DeleteOrganizationOrganizationIDRelationshipsWorkspaceParams, opts ...ClientOption) (*DeleteOrganizationOrganizationIDRelationshipsWorkspaceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationOrganizationIDRelationshipsWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOrganizationOrganizationIDRelationshipsWorkspace",
		Method:             "DELETE",
		PathPattern:        "/organization/{organizationId}/relationships/workspace",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationOrganizationIDRelationshipsWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationOrganizationIDRelationshipsWorkspaceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteOrganizationOrganizationIDRelationshipsWorkspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationOrganizationIDWorkspaceWorkspaceID Deletes an instance of type workspace
*/
func (a *Client) DeleteOrganizationOrganizationIDWorkspaceWorkspaceID(params *DeleteOrganizationOrganizationIDWorkspaceWorkspaceIDParams, opts ...ClientOption) (*DeleteOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationOrganizationIDWorkspaceWorkspaceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOrganizationOrganizationIDWorkspaceWorkspaceID",
		Method:             "DELETE",
		PathPattern:        "/organization/{organizationId}/workspace/{workspaceId}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationOrganizationIDWorkspaceWorkspaceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteOrganizationOrganizationIDWorkspaceWorkspaceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationOrganizationIDRelationshipsWorkspace Returns the relationship identifiers for workspace
*/
func (a *Client) GetOrganizationOrganizationIDRelationshipsWorkspace(params *GetOrganizationOrganizationIDRelationshipsWorkspaceParams, opts ...ClientOption) (*GetOrganizationOrganizationIDRelationshipsWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationOrganizationIDRelationshipsWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrganizationOrganizationIDRelationshipsWorkspace",
		Method:             "GET",
		PathPattern:        "/organization/{organizationId}/relationships/workspace",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationOrganizationIDRelationshipsWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationOrganizationIDRelationshipsWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOrganizationOrganizationIDRelationshipsWorkspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationOrganizationIDWorkspace Returns the relationship workspace
*/
func (a *Client) GetOrganizationOrganizationIDWorkspace(params *GetOrganizationOrganizationIDWorkspaceParams, opts ...ClientOption) (*GetOrganizationOrganizationIDWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationOrganizationIDWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrganizationOrganizationIDWorkspace",
		Method:             "GET",
		PathPattern:        "/organization/{organizationId}/workspace",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationOrganizationIDWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationOrganizationIDWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOrganizationOrganizationIDWorkspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationOrganizationIDWorkspaceWorkspaceID Returns an instance of type workspace
*/
func (a *Client) GetOrganizationOrganizationIDWorkspaceWorkspaceID(params *GetOrganizationOrganizationIDWorkspaceWorkspaceIDParams, opts ...ClientOption) (*GetOrganizationOrganizationIDWorkspaceWorkspaceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationOrganizationIDWorkspaceWorkspaceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrganizationOrganizationIDWorkspaceWorkspaceID",
		Method:             "GET",
		PathPattern:        "/organization/{organizationId}/workspace/{workspaceId}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationOrganizationIDWorkspaceWorkspaceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationOrganizationIDWorkspaceWorkspaceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOrganizationOrganizationIDWorkspaceWorkspaceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchOrganizationOrganizationIDRelationshipsWorkspace Replaces the relationship workspace
*/
func (a *Client) PatchOrganizationOrganizationIDRelationshipsWorkspace(params *PatchOrganizationOrganizationIDRelationshipsWorkspaceParams, opts ...ClientOption) (*PatchOrganizationOrganizationIDRelationshipsWorkspaceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchOrganizationOrganizationIDRelationshipsWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchOrganizationOrganizationIDRelationshipsWorkspace",
		Method:             "PATCH",
		PathPattern:        "/organization/{organizationId}/relationships/workspace",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchOrganizationOrganizationIDRelationshipsWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchOrganizationOrganizationIDRelationshipsWorkspaceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchOrganizationOrganizationIDRelationshipsWorkspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchOrganizationOrganizationIDWorkspaceWorkspaceID Modifies an instance of type workspace
*/
func (a *Client) PatchOrganizationOrganizationIDWorkspaceWorkspaceID(params *PatchOrganizationOrganizationIDWorkspaceWorkspaceIDParams, opts ...ClientOption) (*PatchOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchOrganizationOrganizationIDWorkspaceWorkspaceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchOrganizationOrganizationIDWorkspaceWorkspaceID",
		Method:             "PATCH",
		PathPattern:        "/organization/{organizationId}/workspace/{workspaceId}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchOrganizationOrganizationIDWorkspaceWorkspaceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchOrganizationOrganizationIDWorkspaceWorkspaceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostOrganizationOrganizationIDRelationshipsWorkspace Adds items to the relationship workspace
*/
func (a *Client) PostOrganizationOrganizationIDRelationshipsWorkspace(params *PostOrganizationOrganizationIDRelationshipsWorkspaceParams, opts ...ClientOption) (*PostOrganizationOrganizationIDRelationshipsWorkspaceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrganizationOrganizationIDRelationshipsWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOrganizationOrganizationIDRelationshipsWorkspace",
		Method:             "POST",
		PathPattern:        "/organization/{organizationId}/relationships/workspace",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOrganizationOrganizationIDRelationshipsWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOrganizationOrganizationIDRelationshipsWorkspaceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOrganizationOrganizationIDRelationshipsWorkspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostOrganizationOrganizationIDWorkspace Creates an item of type workspace and adds it to workspace
*/
func (a *Client) PostOrganizationOrganizationIDWorkspace(params *PostOrganizationOrganizationIDWorkspaceParams, opts ...ClientOption) (*PostOrganizationOrganizationIDWorkspaceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrganizationOrganizationIDWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOrganizationOrganizationIDWorkspace",
		Method:             "POST",
		PathPattern:        "/organization/{organizationId}/workspace",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOrganizationOrganizationIDWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOrganizationOrganizationIDWorkspaceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOrganizationOrganizationIDWorkspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
