// Code generated by go-swagger; DO NOT EDIT.

package workspace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"azb/client/models"
)

// PatchOrganizationOrganizationIDWorkspaceWorkspaceIDReader is a Reader for the PatchOrganizationOrganizationIDWorkspaceWorkspaceID structure.
type PatchOrganizationOrganizationIDWorkspaceWorkspaceIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchOrganizationOrganizationIDWorkspaceWorkspaceIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPatchOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent creates a PatchOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent with default headers values
func NewPatchOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent() *PatchOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent {
	return &PatchOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent{}
}

/* PatchOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent describes a response with status code 204, with default header values.

Successful response
*/
type PatchOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent struct {
}

func (o *PatchOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent) Error() string {
	return fmt.Sprintf("[PATCH /organization/{organizationId}/workspace/{workspaceId}][%d] patchOrganizationOrganizationIdWorkspaceWorkspaceIdNoContent ", 204)
}

func (o *PatchOrganizationOrganizationIDWorkspaceWorkspaceIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PatchOrganizationOrganizationIDWorkspaceWorkspaceIDBody patch organization organization ID workspace workspace ID body
swagger:model PatchOrganizationOrganizationIDWorkspaceWorkspaceIDBody
*/
type PatchOrganizationOrganizationIDWorkspaceWorkspaceIDBody struct {

	// data
	Data *models.Workspace `json:"data,omitempty"`
}

// Validate validates this patch organization organization ID workspace workspace ID body
func (o *PatchOrganizationOrganizationIDWorkspaceWorkspaceIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchOrganizationOrganizationIDWorkspaceWorkspaceIDBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspace" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this patch organization organization ID workspace workspace ID body based on the context it is used
func (o *PatchOrganizationOrganizationIDWorkspaceWorkspaceIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchOrganizationOrganizationIDWorkspaceWorkspaceIDBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {
		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspace" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchOrganizationOrganizationIDWorkspaceWorkspaceIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchOrganizationOrganizationIDWorkspaceWorkspaceIDBody) UnmarshalBinary(b []byte) error {
	var res PatchOrganizationOrganizationIDWorkspaceWorkspaceIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
