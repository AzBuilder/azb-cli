// Code generated by go-swagger; DO NOT EDIT.

package module

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new module API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for module API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteOrganizationOrganizationIDModuleModuleID(params *DeleteOrganizationOrganizationIDModuleModuleIDParams, opts ...ClientOption) (*DeleteOrganizationOrganizationIDModuleModuleIDNoContent, error)

	DeleteOrganizationOrganizationIDRelationshipsModule(params *DeleteOrganizationOrganizationIDRelationshipsModuleParams, opts ...ClientOption) (*DeleteOrganizationOrganizationIDRelationshipsModuleNoContent, error)

	GetOrganizationOrganizationIDModule(params *GetOrganizationOrganizationIDModuleParams, opts ...ClientOption) (*GetOrganizationOrganizationIDModuleOK, error)

	GetOrganizationOrganizationIDModuleModuleID(params *GetOrganizationOrganizationIDModuleModuleIDParams, opts ...ClientOption) (*GetOrganizationOrganizationIDModuleModuleIDOK, error)

	GetOrganizationOrganizationIDRelationshipsModule(params *GetOrganizationOrganizationIDRelationshipsModuleParams, opts ...ClientOption) (*GetOrganizationOrganizationIDRelationshipsModuleOK, error)

	PatchOrganizationOrganizationIDModuleModuleID(params *PatchOrganizationOrganizationIDModuleModuleIDParams, opts ...ClientOption) (*PatchOrganizationOrganizationIDModuleModuleIDNoContent, error)

	PatchOrganizationOrganizationIDRelationshipsModule(params *PatchOrganizationOrganizationIDRelationshipsModuleParams, opts ...ClientOption) (*PatchOrganizationOrganizationIDRelationshipsModuleNoContent, error)

	PostOrganizationOrganizationIDModule(params *PostOrganizationOrganizationIDModuleParams, opts ...ClientOption) (*PostOrganizationOrganizationIDModuleCreated, error)

	PostOrganizationOrganizationIDRelationshipsModule(params *PostOrganizationOrganizationIDRelationshipsModuleParams, opts ...ClientOption) (*PostOrganizationOrganizationIDRelationshipsModuleCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteOrganizationOrganizationIDModuleModuleID Deletes an instance of type module
*/
func (a *Client) DeleteOrganizationOrganizationIDModuleModuleID(params *DeleteOrganizationOrganizationIDModuleModuleIDParams, opts ...ClientOption) (*DeleteOrganizationOrganizationIDModuleModuleIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationOrganizationIDModuleModuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOrganizationOrganizationIDModuleModuleID",
		Method:             "DELETE",
		PathPattern:        "/organization/{organizationId}/module/{moduleId}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationOrganizationIDModuleModuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationOrganizationIDModuleModuleIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteOrganizationOrganizationIDModuleModuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationOrganizationIDRelationshipsModule Deletes items from the relationship module
*/
func (a *Client) DeleteOrganizationOrganizationIDRelationshipsModule(params *DeleteOrganizationOrganizationIDRelationshipsModuleParams, opts ...ClientOption) (*DeleteOrganizationOrganizationIDRelationshipsModuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationOrganizationIDRelationshipsModuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOrganizationOrganizationIDRelationshipsModule",
		Method:             "DELETE",
		PathPattern:        "/organization/{organizationId}/relationships/module",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationOrganizationIDRelationshipsModuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationOrganizationIDRelationshipsModuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteOrganizationOrganizationIDRelationshipsModule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationOrganizationIDModule Returns the relationship module
*/
func (a *Client) GetOrganizationOrganizationIDModule(params *GetOrganizationOrganizationIDModuleParams, opts ...ClientOption) (*GetOrganizationOrganizationIDModuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationOrganizationIDModuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrganizationOrganizationIDModule",
		Method:             "GET",
		PathPattern:        "/organization/{organizationId}/module",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationOrganizationIDModuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationOrganizationIDModuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOrganizationOrganizationIDModule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationOrganizationIDModuleModuleID Returns an instance of type module
*/
func (a *Client) GetOrganizationOrganizationIDModuleModuleID(params *GetOrganizationOrganizationIDModuleModuleIDParams, opts ...ClientOption) (*GetOrganizationOrganizationIDModuleModuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationOrganizationIDModuleModuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrganizationOrganizationIDModuleModuleID",
		Method:             "GET",
		PathPattern:        "/organization/{organizationId}/module/{moduleId}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationOrganizationIDModuleModuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationOrganizationIDModuleModuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOrganizationOrganizationIDModuleModuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationOrganizationIDRelationshipsModule Returns the relationship identifiers for module
*/
func (a *Client) GetOrganizationOrganizationIDRelationshipsModule(params *GetOrganizationOrganizationIDRelationshipsModuleParams, opts ...ClientOption) (*GetOrganizationOrganizationIDRelationshipsModuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationOrganizationIDRelationshipsModuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrganizationOrganizationIDRelationshipsModule",
		Method:             "GET",
		PathPattern:        "/organization/{organizationId}/relationships/module",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationOrganizationIDRelationshipsModuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationOrganizationIDRelationshipsModuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOrganizationOrganizationIDRelationshipsModule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchOrganizationOrganizationIDModuleModuleID Modifies an instance of type module
*/
func (a *Client) PatchOrganizationOrganizationIDModuleModuleID(params *PatchOrganizationOrganizationIDModuleModuleIDParams, opts ...ClientOption) (*PatchOrganizationOrganizationIDModuleModuleIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchOrganizationOrganizationIDModuleModuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchOrganizationOrganizationIDModuleModuleID",
		Method:             "PATCH",
		PathPattern:        "/organization/{organizationId}/module/{moduleId}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchOrganizationOrganizationIDModuleModuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchOrganizationOrganizationIDModuleModuleIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchOrganizationOrganizationIDModuleModuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchOrganizationOrganizationIDRelationshipsModule Replaces the relationship module
*/
func (a *Client) PatchOrganizationOrganizationIDRelationshipsModule(params *PatchOrganizationOrganizationIDRelationshipsModuleParams, opts ...ClientOption) (*PatchOrganizationOrganizationIDRelationshipsModuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchOrganizationOrganizationIDRelationshipsModuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchOrganizationOrganizationIDRelationshipsModule",
		Method:             "PATCH",
		PathPattern:        "/organization/{organizationId}/relationships/module",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchOrganizationOrganizationIDRelationshipsModuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchOrganizationOrganizationIDRelationshipsModuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchOrganizationOrganizationIDRelationshipsModule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostOrganizationOrganizationIDModule Creates an item of type module and adds it to module
*/
func (a *Client) PostOrganizationOrganizationIDModule(params *PostOrganizationOrganizationIDModuleParams, opts ...ClientOption) (*PostOrganizationOrganizationIDModuleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrganizationOrganizationIDModuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOrganizationOrganizationIDModule",
		Method:             "POST",
		PathPattern:        "/organization/{organizationId}/module",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOrganizationOrganizationIDModuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOrganizationOrganizationIDModuleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOrganizationOrganizationIDModule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostOrganizationOrganizationIDRelationshipsModule Adds items to the relationship module
*/
func (a *Client) PostOrganizationOrganizationIDRelationshipsModule(params *PostOrganizationOrganizationIDRelationshipsModuleParams, opts ...ClientOption) (*PostOrganizationOrganizationIDRelationshipsModuleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrganizationOrganizationIDRelationshipsModuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOrganizationOrganizationIDRelationshipsModule",
		Method:             "POST",
		PathPattern:        "/organization/{organizationId}/relationships/module",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOrganizationOrganizationIDRelationshipsModuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOrganizationOrganizationIDRelationshipsModuleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOrganizationOrganizationIDRelationshipsModule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
