// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new organization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteOrganizationOrganizationID(params *DeleteOrganizationOrganizationIDParams, opts ...ClientOption) (*DeleteOrganizationOrganizationIDNoContent, error)

	GetOrganization(params *GetOrganizationParams, opts ...ClientOption) (*GetOrganizationOK, error)

	GetOrganizationOrganizationID(params *GetOrganizationOrganizationIDParams, opts ...ClientOption) (*GetOrganizationOrganizationIDOK, error)

	PatchOrganizationOrganizationID(params *PatchOrganizationOrganizationIDParams, opts ...ClientOption) (*PatchOrganizationOrganizationIDNoContent, error)

	PostOrganization(params *PostOrganizationParams, opts ...ClientOption) (*PostOrganizationCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteOrganizationOrganizationID Deletes an instance of type organization
*/
func (a *Client) DeleteOrganizationOrganizationID(params *DeleteOrganizationOrganizationIDParams, opts ...ClientOption) (*DeleteOrganizationOrganizationIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationOrganizationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOrganizationOrganizationID",
		Method:             "DELETE",
		PathPattern:        "/organization/{organizationId}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationOrganizationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationOrganizationIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteOrganizationOrganizationID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganization Returns the collection of type organization
*/
func (a *Client) GetOrganization(params *GetOrganizationParams, opts ...ClientOption) (*GetOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrganization",
		Method:             "GET",
		PathPattern:        "/organization",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationOrganizationID Returns an instance of type organization
*/
func (a *Client) GetOrganizationOrganizationID(params *GetOrganizationOrganizationIDParams, opts ...ClientOption) (*GetOrganizationOrganizationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationOrganizationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrganizationOrganizationID",
		Method:             "GET",
		PathPattern:        "/organization/{organizationId}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationOrganizationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationOrganizationIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOrganizationOrganizationID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchOrganizationOrganizationID Modifies an instance of type organization
*/
func (a *Client) PatchOrganizationOrganizationID(params *PatchOrganizationOrganizationIDParams, opts ...ClientOption) (*PatchOrganizationOrganizationIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchOrganizationOrganizationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchOrganizationOrganizationID",
		Method:             "PATCH",
		PathPattern:        "/organization/{organizationId}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchOrganizationOrganizationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchOrganizationOrganizationIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchOrganizationOrganizationID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostOrganization Creates an item of type organization
*/
func (a *Client) PostOrganization(params *PostOrganizationParams, opts ...ClientOption) (*PostOrganizationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOrganization",
		Method:             "POST",
		PathPattern:        "/organization",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOrganizationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
