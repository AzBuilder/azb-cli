// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationParams creates a new GetOrganizationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrganizationParams() *GetOrganizationParams {
	return &GetOrganizationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationParamsWithTimeout creates a new GetOrganizationParams object
// with the ability to set a timeout on a request.
func NewGetOrganizationParamsWithTimeout(timeout time.Duration) *GetOrganizationParams {
	return &GetOrganizationParams{
		timeout: timeout,
	}
}

// NewGetOrganizationParamsWithContext creates a new GetOrganizationParams object
// with the ability to set a context for a request.
func NewGetOrganizationParamsWithContext(ctx context.Context) *GetOrganizationParams {
	return &GetOrganizationParams{
		Context: ctx,
	}
}

// NewGetOrganizationParamsWithHTTPClient creates a new GetOrganizationParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrganizationParamsWithHTTPClient(client *http.Client) *GetOrganizationParams {
	return &GetOrganizationParams{
		HTTPClient: client,
	}
}

/* GetOrganizationParams contains all the parameters to send to the API endpoint
   for the get organization operation.

   Typically these are written to a http.Request.
*/
type GetOrganizationParams struct {

	/* FieldsOrganization.

	   Selects the set of organization fields that should be returned in the result.
	*/
	FieldsOrganization []string

	/* Filter.

	   Filters the collection of organization using a 'joined' RSQL expression
	*/
	Filter *string

	/* FilterOrganization.

	   Filters the collection of organization using a 'disjoint' RSQL expression
	*/
	FilterOrganization *string

	/* Include.

	   Selects the set of relationships that should be expanded as a compound document in the result.
	*/
	Include []string

	/* PageLimit.

	   Maximum number of items to return.  Can be used with page[offset]
	*/
	PageLimit *int64

	/* PageNumber.

	   Number of pages to return.  Can be used with page[size]
	*/
	PageNumber *int64

	/* PageOffset.

	   Offset from 0 to start paginating.  Can be used with page[limit]
	*/
	PageOffset *int64

	/* PageSize.

	   Number of elements per page.  Can be used with page[number]
	*/
	PageSize *int64

	/* PageTotals.

	   For requesting total pages/records be included in the response page meta data
	*/
	PageTotals *string

	/* Sort.

	   Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
	*/
	Sort []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get organization params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationParams) WithDefaults() *GetOrganizationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get organization params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get organization params
func (o *GetOrganizationParams) WithTimeout(timeout time.Duration) *GetOrganizationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organization params
func (o *GetOrganizationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organization params
func (o *GetOrganizationParams) WithContext(ctx context.Context) *GetOrganizationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organization params
func (o *GetOrganizationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organization params
func (o *GetOrganizationParams) WithHTTPClient(client *http.Client) *GetOrganizationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organization params
func (o *GetOrganizationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFieldsOrganization adds the fieldsOrganization to the get organization params
func (o *GetOrganizationParams) WithFieldsOrganization(fieldsOrganization []string) *GetOrganizationParams {
	o.SetFieldsOrganization(fieldsOrganization)
	return o
}

// SetFieldsOrganization adds the fieldsOrganization to the get organization params
func (o *GetOrganizationParams) SetFieldsOrganization(fieldsOrganization []string) {
	o.FieldsOrganization = fieldsOrganization
}

// WithFilter adds the filter to the get organization params
func (o *GetOrganizationParams) WithFilter(filter *string) *GetOrganizationParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get organization params
func (o *GetOrganizationParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithFilterOrganization adds the filterOrganization to the get organization params
func (o *GetOrganizationParams) WithFilterOrganization(filterOrganization *string) *GetOrganizationParams {
	o.SetFilterOrganization(filterOrganization)
	return o
}

// SetFilterOrganization adds the filterOrganization to the get organization params
func (o *GetOrganizationParams) SetFilterOrganization(filterOrganization *string) {
	o.FilterOrganization = filterOrganization
}

// WithInclude adds the include to the get organization params
func (o *GetOrganizationParams) WithInclude(include []string) *GetOrganizationParams {
	o.SetInclude(include)
	return o
}

// SetInclude adds the include to the get organization params
func (o *GetOrganizationParams) SetInclude(include []string) {
	o.Include = include
}

// WithPageLimit adds the pageLimit to the get organization params
func (o *GetOrganizationParams) WithPageLimit(pageLimit *int64) *GetOrganizationParams {
	o.SetPageLimit(pageLimit)
	return o
}

// SetPageLimit adds the pageLimit to the get organization params
func (o *GetOrganizationParams) SetPageLimit(pageLimit *int64) {
	o.PageLimit = pageLimit
}

// WithPageNumber adds the pageNumber to the get organization params
func (o *GetOrganizationParams) WithPageNumber(pageNumber *int64) *GetOrganizationParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get organization params
func (o *GetOrganizationParams) SetPageNumber(pageNumber *int64) {
	o.PageNumber = pageNumber
}

// WithPageOffset adds the pageOffset to the get organization params
func (o *GetOrganizationParams) WithPageOffset(pageOffset *int64) *GetOrganizationParams {
	o.SetPageOffset(pageOffset)
	return o
}

// SetPageOffset adds the pageOffset to the get organization params
func (o *GetOrganizationParams) SetPageOffset(pageOffset *int64) {
	o.PageOffset = pageOffset
}

// WithPageSize adds the pageSize to the get organization params
func (o *GetOrganizationParams) WithPageSize(pageSize *int64) *GetOrganizationParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get organization params
func (o *GetOrganizationParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithPageTotals adds the pageTotals to the get organization params
func (o *GetOrganizationParams) WithPageTotals(pageTotals *string) *GetOrganizationParams {
	o.SetPageTotals(pageTotals)
	return o
}

// SetPageTotals adds the pageTotals to the get organization params
func (o *GetOrganizationParams) SetPageTotals(pageTotals *string) {
	o.PageTotals = pageTotals
}

// WithSort adds the sort to the get organization params
func (o *GetOrganizationParams) WithSort(sort []string) *GetOrganizationParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get organization params
func (o *GetOrganizationParams) SetSort(sort []string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FieldsOrganization != nil {

		// binding items for fields[organization]
		joinedFieldsOrganization := o.bindParamFieldsOrganization(reg)

		// query array param fields[organization]
		if err := r.SetQueryParam("fields[organization]", joinedFieldsOrganization...); err != nil {
			return err
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.FilterOrganization != nil {

		// query param filter[organization]
		var qrFilterOrganization string

		if o.FilterOrganization != nil {
			qrFilterOrganization = *o.FilterOrganization
		}
		qFilterOrganization := qrFilterOrganization
		if qFilterOrganization != "" {

			if err := r.SetQueryParam("filter[organization]", qFilterOrganization); err != nil {
				return err
			}
		}
	}

	if o.Include != nil {

		// binding items for include
		joinedInclude := o.bindParamInclude(reg)

		// query array param include
		if err := r.SetQueryParam("include", joinedInclude...); err != nil {
			return err
		}
	}

	if o.PageLimit != nil {

		// query param page[limit]
		var qrPageLimit int64

		if o.PageLimit != nil {
			qrPageLimit = *o.PageLimit
		}
		qPageLimit := swag.FormatInt64(qrPageLimit)
		if qPageLimit != "" {

			if err := r.SetQueryParam("page[limit]", qPageLimit); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber int64

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt64(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageOffset != nil {

		// query param page[offset]
		var qrPageOffset int64

		if o.PageOffset != nil {
			qrPageOffset = *o.PageOffset
		}
		qPageOffset := swag.FormatInt64(qrPageOffset)
		if qPageOffset != "" {

			if err := r.SetQueryParam("page[offset]", qPageOffset); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PageTotals != nil {

		// query param page[totals]
		var qrPageTotals string

		if o.PageTotals != nil {
			qrPageTotals = *o.PageTotals
		}
		qPageTotals := qrPageTotals
		if qPageTotals != "" {

			if err := r.SetQueryParam("page[totals]", qPageTotals); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// binding items for sort
		joinedSort := o.bindParamSort(reg)

		// query array param sort
		if err := r.SetQueryParam("sort", joinedSort...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetOrganization binds the parameter fields[organization]
func (o *GetOrganizationParams) bindParamFieldsOrganization(formats strfmt.Registry) []string {
	fieldsOrganizationIR := o.FieldsOrganization

	var fieldsOrganizationIC []string
	for _, fieldsOrganizationIIR := range fieldsOrganizationIR { // explode []string

		fieldsOrganizationIIV := fieldsOrganizationIIR // string as string
		fieldsOrganizationIC = append(fieldsOrganizationIC, fieldsOrganizationIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsOrganizationIS := swag.JoinByFormat(fieldsOrganizationIC, "csv")

	return fieldsOrganizationIS
}

// bindParamGetOrganization binds the parameter include
func (o *GetOrganizationParams) bindParamInclude(formats strfmt.Registry) []string {
	includeIR := o.Include

	var includeIC []string
	for _, includeIIR := range includeIR { // explode []string

		includeIIV := includeIIR // string as string
		includeIC = append(includeIC, includeIIV)
	}

	// items.CollectionFormat: "csv"
	includeIS := swag.JoinByFormat(includeIC, "csv")

	return includeIS
}

// bindParamGetOrganization binds the parameter sort
func (o *GetOrganizationParams) bindParamSort(formats strfmt.Registry) []string {
	sortIR := o.Sort

	var sortIC []string
	for _, sortIIR := range sortIR { // explode []string

		sortIIV := sortIIR // string as string
		sortIC = append(sortIC, sortIIV)
	}

	// items.CollectionFormat: "csv"
	sortIS := swag.JoinByFormat(sortIC, "csv")

	return sortIS
}
